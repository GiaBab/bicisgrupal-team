import bicis.*
import accesorios.*
import deposito.*



describe "Propiedades de una bicicleta" {	
	
	var biciA = new Bici(rodado=26, largo=120, marca=legnano)
	
	test "Altura" {
		assert.equals(26 * 2.5 + 15, biciA.altura())
	}
	
	test "Velocidad" {
		assert.equals(26 + 2, biciA.velocidad())
	}
}

describe "Propiedades de una bicicleta con accesorios" {
	var biciA = new Bici(rodado=26, largo=120, marca=legnano, accesorios=[
		new Farolito(),
		new Canasto(volumen=10),
		new MorralDeBici(largo=10, tieneOjoDeGato=false)
	])
	
	test "Tiene luz?" {
		assert.that(biciA.tieneLuz())
	}
	
	test "Carga" {
		assert.equals(20+10/3, biciA.carga())
	}
	
	test "Peso" {
		assert.equals(26/2 + (20+10/3), biciA.peso())
	}
	
	test "Cantidad de accesorios livianos" {
		assert.equals(1,biciA.cantidadAccesoriosLivianos())
	}
	
}

/*
	Por ejemplo, para un depósito que tiene las tres bicis descriptas en el punto anterior, tenemos:
	
	las bicis rápidas son las dos primeras (la rodado 28 y la rodado 26).
	las marcas son "Olmo" y "Legnano".
	el depósito no es nocturno (por la tercera bici).
	sí tiene bici para llevar 10 kilos, no tiene bici para llevar 50 kilos.
	Un depósito que tenga solamente las dos primeras bicis, sí es nocturno.
*/
describe "Depósito" {
	
	// Bicis normies
	const biciA = new Bici(rodado=28, largo=120, marca=olmo)
	const biciB = new Bici(rodado=26, largo=120, marca=legnano)
	const biciC = new Bici(rodado=16, largo=120, marca=olmo, accesorios=[new Farolito()])
		
	const deposito = new Deposito(bicicletas=[
		biciA, biciB, biciC
	])
	
	// Momento de bicis OP (Jerga de overpowered)
	const biciOP_A = new Bici(rodado=26, largo=120, marca=olmo, accesorios=[
		new Canasto(volumen=10)
	])
	const biciOP_B = new Bici(rodado=24, largo=120, marca="BMX", accesorios=[
		new MorralDeBici(largo=20, tieneOjoDeGato=true)
	])
	
	const depositoDeBicisOP = new Deposito(bicicletas=#{
		biciOP_A, biciOP_B
	})
	
	test "Bicis rápidas" {
		assert.equals([biciA, biciB], deposito.bicisRapidas())
	}
	
	test "Marcas de bicis" {
		assert.equals(#{olmo, legnano}, deposito.marcasDeBicis())
	}
	
	test "Depósito nocturno?" {
		assert.notThat(deposito.esNocturno())
	}
	
	test "No pueden llevar 0.4kg" {
		assert.notThat(deposito.algunaBiciPuedeLlevar(0.4))
	}
	
	test "Bicis que puedan cargar 5kg" {
		assert.that(depositoDeBicisOP.algunaBiciPuedeLlevar(5))
	}
}

describe "son compañeras" {
	// Bicis normies
	const biciA = new Bici(rodado=28, largo=120, marca=olmo)
	const biciB = new Bici(rodado=26, largo=120, marca=legnano)
	const biciC = new Bici(rodado=16, largo=120, marca=olmo, accesorios=[new Farolito()])
	const biciMaradona = new Bici(rodado=26, largo=100, marca=legnano)
	const biciF = new Bici(rodado=28, largo=130, marca=olmo)
	
	const deposito = new Deposito(bicicletas=[
		biciA, biciB, biciC
	])
	
	const deposito2 = new Deposito(bicicletas=[
		biciA, biciB, biciMaradona
	])
	
	test "son compañeras"{
		assert.equals([biciA, biciC],biciF.esCompannera(deposito.bicicletas()))
	}
	
	test "son compañeras2"{
		assert.equals([],biciMaradona.esCompannera(deposito.bicicletas()))
	}
	
	test "hay compañeras"{
		assert.that(deposito.hayCompannera())
	}
	
	test "no hay compañeras"{
		assert.notThat(deposito2.hayCompannera())
	}
	
	test "grupo de compañera"{
		assert.equals([biciA,biciC], deposito.parDeBicis())
	}
}